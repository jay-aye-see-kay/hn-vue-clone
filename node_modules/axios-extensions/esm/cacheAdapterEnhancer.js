import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
/**
 * @author Kuitos
 * @homepage https://github.com/kuitos/
 * @since 2017-10-12
 */

import LRUCache from 'lru-cache';
import buildSortedURL from './utils/buildSortedURL';
import isCacheLike from './utils/isCacheLike';

var FIVE_MINUTES = 1000 * 60 * 5;

export default function cacheAdapterEnhancer(adapter) {
	var cacheEnabledByDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	var _this = this;

	var enableCacheFlag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'cache';
	var defaultLRUCache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new LRUCache({ maxAge: FIVE_MINUTES });


	return function (config) {
		var url = config.url,
		    method = config.method,
		    params = config.params,
		    paramsSerializer = config.paramsSerializer,
		    forceUpdate = config.forceUpdate;

		var useCache = config[enableCacheFlag] !== void 0 ? config[enableCacheFlag] : cacheEnabledByDefault;

		if (method === 'get' && useCache) {

			// if had provide a specified cache, then use it instead
			var cache = isCacheLike(useCache) ? useCache : defaultLRUCache;

			// build the index according to the url and params
			var index = buildSortedURL(url, params, paramsSerializer);

			var responsePromise = cache.get(index);

			if (!responsePromise || forceUpdate) {

				responsePromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
					var response;
					return _regeneratorRuntime.wrap(function _callee$(_context) {
						while (1) {
							switch (_context.prev = _context.next) {
								case 0:
									_context.prev = 0;
									_context.next = 3;
									return adapter(config);

								case 3:
									response = _context.sent;

									cache.set(index, Promise.resolve(response));
									return _context.abrupt('return', response);

								case 8:
									_context.prev = 8;
									_context.t0 = _context['catch'](0);

									cache.del(index);
									throw _context.t0;

								case 12:
								case 'end':
									return _context.stop();
							}
						}
					}, _callee, _this, [[0, 8]]);
				}))();

				// put the promise for the non-transformed response into cache as a placeholder
				cache.set(index, responsePromise);

				return responsePromise;
			}

			/* istanbul ignore next */
			if (process.env.LOGGER_LEVEL === 'info') {
				// eslint-disable-next-line no-console
				console.info('request cached by cache adapter: ' + index);
			}

			return responsePromise;
		}

		return adapter(config);
	};
}