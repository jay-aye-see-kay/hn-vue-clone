import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
/**
 * @author Kuitos
 * @homepage https://github.com/kuitos/
 * @since 2017-10-11
 */

import LRUCache from 'lru-cache';
import buildSortedURL from './utils/buildSortedURL';

export default function throttleAdapterEnhancer(adapter) {
	var _this = this;

	var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
	var cacheCapacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;


	var cache = new LRUCache({ max: cacheCapacity });
	var recordCacheWithRequest = function recordCacheWithRequest(index, config) {

		var responsePromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
			var response;
			return _regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.prev = 0;
							_context.next = 3;
							return adapter(config);

						case 3:
							response = _context.sent;


							cache.set(index, {
								timestamp: Date.now(),
								value: Promise.resolve(response)
							});

							return _context.abrupt('return', response);

						case 8:
							_context.prev = 8;
							_context.t0 = _context['catch'](0);

							cache.del(index);
							return _context.abrupt('return', Promise.reject(_context.t0));

						case 12:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, _this, [[0, 8]]);
		}))();

		cache.set(index, {
			timestamp: Date.now(),
			value: responsePromise
		});

		return responsePromise;
	};

	return function (config) {
		var url = config.url,
		    method = config.method,
		    params = config.params,
		    paramsSerializer = config.paramsSerializer;

		var index = buildSortedURL(url, params, paramsSerializer);

		var now = Date.now();
		var cachedRecord = cache.get(index) || { timestamp: now };

		if (method === 'get') {

			if (now - cachedRecord.timestamp <= threshold) {

				var responsePromise = cachedRecord.value;
				if (responsePromise) {

					/* istanbul ignore next */
					if (process.env.LOGGER_LEVEL === 'info') {
						// eslint-disable-next-line no-console
						console.info('request cached by throttle adapter: ' + index);
					}

					return responsePromise;
				}
			}

			return recordCacheWithRequest(index, config);
		}

		return adapter(config);
	};
}